#!python
import os, subprocess

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
# env = DefaultEnvironment()
#CHer. Pruebo a quitar lo anterior
env = Environment()

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['d', 'debug', 'r', 'release']))
#opts.Add(EnumVariable('platform', "Compilation platform", '', ['', 'windows', 'x11', 'linux', 'osx']))

#CHer. Hago modificaciones en lo anterior, para que compile para javascript con Emscripten
opts.Add(EnumVariable('platform', "Compilation platform", '', ['', 'windows', 'x11', 'linux', 'osx', 'javascript']))
#

opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'", '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'demo/bin/'))
opts.Add(PathVariable('target_name', 'The library name.', 'libgdexample', PathVariable.PathAccept))

# Local dependency paths, adapt them to your setup
godot_headers_path = "godot-cpp/godot-headers/"
cpp_bindings_path = "godot-cpp/"
cpp_library = "libgodot-cpp"

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit();

# Check our platform specifics
if env['platform'] == "osx":
    env['target_path'] += 'osx/'
    cpp_library += '.osx'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-g','-O2', '-arch', 'x86_64', '-std=c++17'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64'])
    else:
        env.Append(CCFLAGS = ['-g','-O3', '-arch', 'x86_64', '-std=c++17'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64'])

elif env['platform'] in ('x11', 'linux'):
    env['target_path'] += 'x11/'
    cpp_library += '.linux'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-fPIC', '-g3','-Og', '-std=c++17'])
    else:
        env.Append(CCFLAGS = ['-fPIC', '-g','-O3', '-std=c++17'])

elif env['platform'] == "windows":
    env['target_path'] += 'win64/'
    cpp_library += '.windows'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV = os.environ)

    env.Append(CCFLAGS = ['-DWIN32', '-D_WIN32', '-D_WINDOWS', '-W3', '-GR', '-D_CRT_SECURE_NO_WARNINGS'])
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-EHsc', '-D_DEBUG', '-MDd'])
    else:
        env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '-MD'])

#CHer. Añado esto para que me compile para javascript con Emscripten
elif env['platform'] == "javascript":
    env['target_path'] += 'javascript/'
    cpp_library += '.javascript'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    # env.Append(ENV = os.environ)
    
    #Para intentarlo en windows:
    # env = env.Clone(tools=['mingw'])
    
    # env["SHLIBSONAMEFLAGS"] = ""
    # env["SHLIBVERSIONFLAGS"] = ""
    # env["RPATHPREFIX"] = ""
    # env["SHLIBSONAMEFLAGS"] = ""
    # env["_LDMODULEVERSIONFLAGS"] = ""
    # env["_SHLIBVERSIONFLAGS"] = ""
    # env["LDMODULEVERSIONFLAGS"] = ""
    # env["SHLIBVERSIONFLAGS"] = ""
    
    # env = Environment(tools=['mingw'])
    env["ENV"] = os.environ
    env["CC"] = "emcc"
    env["CXX"] = "em++"
    env["AR"] = "emar"
    env["RANLIB"] = "emranlib"
    env.Append(CPPFLAGS=["-s", "SIDE_MODULE=1"])
    env.Append(LINKFLAGS=["-s", "SIDE_MODULE=1"])
    env["SHOBJSUFFIX"] = ".bc"
    env["SHLIBSUFFIX"] = ".wasm"
    # Use TempFileMunge since some AR invocations are too long for cmd.exe.
    # Use POSIX-style paths, required with TempFileMunge.
    env["ARCOM_POSIX"] = env["ARCOM"].replace("$TARGET", "$TARGET.posix").replace("$SOURCES", "$SOURCES.posix")
    env["ARCOM"] = "${TEMPFILE(ARCOM_POSIX)}"
    # All intermediate files are just LLVM bitcode.
    env["OBJPREFIX"] = ""
    env["OBJSUFFIX"] = ".bc"
    env["PROGPREFIX"] = ""
    # Program() output consists of multiple files, so specify suffixes manually at builder.
    env["PROGSUFFIX"] = ""
    env["LIBPREFIX"] = "lib"
    env["LIBSUFFIX"] = ".a"
    env["LIBPREFIXES"] = ["$LIBPREFIX"]
    env["LIBSUFFIXES"] = ["$LIBSUFFIX"]
    env.Replace(SHLINKFLAGS="$LINKFLAGS")
    env.Replace(SHLINKFLAGS="$LINKFLAGS")
#

# if env['target'] in ('debug', 'd'):
    # cpp_library += '.debug'
# else:
    # cpp_library += '.release'

# cpp_library += '.' + str(bits)

#CHer. Modifico lo anterior para que me compile para javascript con Emscripten
cpp_library = "libgodot-cpp.javascript.debug.wasm.a"
#

# make sure our binding library is properly includes
env.Append(CPPPATH=['.', godot_headers_path, cpp_bindings_path + 'include/', cpp_bindings_path + 'include/core/', cpp_bindings_path + 'include/gen/'])


#env.Append(LIBPATH=[cpp_bindings_path + 'bin/'])
#No sé por qué, lo anterior sale bien cuando lo printeo, pero sale mal en el comando
env["LIBPATH"] = "godot-cpp/bin/"

env.Append(LIBS=[cpp_library])
print("El LIBS es: " + env.subst('$LIBS'))

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CPPPATH=['src/'])
sources = Glob('src/*.cpp')

# library = env.SharedLibrary(target=env['target_path'] + env['target_name'] , source=sources)
#CHer. Modifico lo anterior para que me compile para javascript con Emscripten
#library = env.SharedLibrary(target=env['target_path'] + env['target_name'] , source=sources)
#CHer. Cambio lo anterior por lo siguiente, para que no me ponga las opciones -Wl (y otras cosas), que no sé cómo quitar mediante flags
library = env.SharedLibrary(target=env['target_path'] + env['target_name'] , source=sources)
# print("El cpp_bindings_path es:"+str(cpp_bindings_path))
# print("El CPPPath es: " + env.subst('$CPPPATH'))
# print("El LIBPATH es: " + env.subst('$LIBPATH'))
# print("El CCCOM es: " + env.subst('$CCCOM'))
# print (env.subst('$CCFLAGS'))
# print (env.subst('$CPPFLAGS'))
# print (env.subst('$CCPCHFLAGS'))
# print ("El _LDMODULEVERSIONFLAGS es: " + env.subst('$_LDMODULEVERSIONFLAGS'))
# print ("El LDMODULECOM es: " + env.subst('$LDMODULECOM'))
# print ("El MTSHLIBCOM es: " + env.subst('$MTSHLIBCOM'))
# print ("El SHDLINKCOM es: " + env.subst('$SHDLINKCOM'))
# print ("El SHCXXCOM es: " + env.subst('$SHCXXCOM'))
# print ("El SHLINK es: " + env.subst('$SHLINK'))
# print ("El SHLINKCOM es: " + env.subst('$SHLINKCOM'))
# print ("El SHLINKFLAGS es: " + env.subst('$SHLINKFLAGS'))
# print ("El SHLIBSONAMEFLAGS es: " + env.subst('$SHLIBSONAMEFLAGS'))


#print (env.Dump())

 

# print (env.subst('$LDMODULEVERSION'))
# print (env.subst('$LDMODULEVERSIONFLAGS'))

 

print("El target es: " + env['target_path'] + env['target_name'])

#






Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
